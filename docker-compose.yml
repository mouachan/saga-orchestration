version: '2'

services:

  keycloak:
    container_name: keycloak
    image: jboss/keycloak
    ports:
      - "8480:8080"
    volumes:
      - ./docker-compose/keycloak/kogito-realm.json:/tmp/kogito-realm.json
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/auth/realms/kogito" ]
      interval: 1s
      timeout: 1s
      retries: 50
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_IMPORT: /tmp/kogito-realm.json
  infinispan:
    image: infinispan/server:12.1.7.Final
    container_name: infinispan
    ports:
        - 11222:11222
    command: "/opt/infinispan/bin/server.sh -c infinispan-demo.xml"
    volumes:
      - ./docker-compose/infinispan/infinispan.xml:/opt/infinispan/server/conf/infinispan-demo.xml:z
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:11222/rest/v2/cache-managers/default/health/status" ]
      interval: 1s
      timeout: 1s
      retries: 50

  zookeeper:
    container_name: zookeeper
    image: strimzi/kafka:0.18.0-kafka-2.5.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs

  kafka:
    container_name: kafka
    image: strimzi/kafka:0.18.0-kafka-2.5.0
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_DELETE_TOPIC_ENABLE: "true" 

  registry:
    container_name: registry
    image: apicurio/apicurio-registry-mem:1.2.2.Final
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8080"
    environment:
      QUARKUS_PROFILE: prod
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      APPLICATION_ID: registry_id
      APPLICATION_SERVER: localhost:9000
  
  bridge:
    container_name: bridge
    image: strimzi/kafka-bridge:0.16.0
    command: [
      "sh", "-c",
      "/opt/strimzi/bin/docker/kafka_bridge_run.sh"
    ]
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8082:8080"
    environment:
      KAFKA_BRIDGE_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_BRIDGE_ID: bridge1
      KAFKA_BRIDGE_HTTP_ENABLED: "true"
      KAFKA_BRIDGE_HTTP_HOST: "0.0.0.0"
      KAFKA_BRIDGE_HTTP_PORT: "8080"
    volumes:
      - ./log4j.properties:/opt/strimzi/custom-config/log4j.properties

  
  prometheus:
    image: prom/prometheus:v2.8.0
    volumes:
      - ./docker-compose/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    depends_on:
      - imsa-process-kogito

  grafana:
    image: grafana/grafana:6.6.1
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./docker-compose/grafana/provisioning/:/etc/grafana/provisioning/
      - ./docker-compose/grafana/grafana.ini:/etc/grafana/grafana.ini

  data-index:
    container_name: data-index
    image: quay.io/kiegroup/kogito-data-index-infinispan:latest
    ports:
      - "8180:8080"
    depends_on:
      kafka:
        condition: service_started
      infinispan:
        condition: service_healthy
    volumes:
      - ./docker-compose/protobufs/:/home/kogito/data/protobufs/
    environment:
      QUARKUS_INFINISPAN_CLIENT_SERVER_LIST: infinispan:11222
      QUARKUS_INFINISPAN_CLIENT_USE_AUTH: "false"
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KOGITO_DATA_INDEX_PROPS: -Dkogito.protobuf.folder=/home/kogito/data/protobufs/

  management-console:
    container_name: management-console
    image: quay.io/kiegroup/kogito-management-console:latest
    ports:
      - 8280:8080
    depends_on:
      data-index:
        condition: service_started
      keycloak:
        condition: service_healthy
    volumes:
      - ./docker-compose/svg/:/home/kogito/data/svg/
    environment:
      KOGITO_DATAINDEX_HTTP_URL: http://localhost:8180/graphql
      KOGITO_MANAGEMENT_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://localhost:8480/auth -Dkogito.consoles.keycloak.config.health-check-url=http://localhost:8480/auth/realms/kogito/.well-known/openid-configuration -Dkogito.svg.folder.path=/home/kogito/data/svg

  jobs-service:
    container_name: jobs-service
    network_mode: "host"
    image: quay.io/kiegroup/kogito-jobs-service-infinispan:latest
    depends_on:
      kafka:
        condition: service_started
      infinispan:
        condition: service_healthy
      data-index:
        condition: service_started
    environment:
      QUARKUS_INFINISPAN_CLIENT_USE_AUTH: "false"
      ENABLE_EVENTS: "true"
      KOGITO_JOBS_PROPS: -Dquarkus-profile=events-support -D%events-support.quarkus.http.port=8580 -D%events-support.kafka.bootstrap.servers=localhost:9092
                         -D%events-support.mp.messaging.outgoing.kogito-job-service-job-status-events.bootstrap.servers=localhost:9092
                         -Dkogito.service.url=http://localhost:8580
  task-console:
    container_name: task-console
    image: quay.io/kiegroup/kogito-task-console:latest
    ports:
      - 8380:8080
    depends_on:
      data-index:
        condition: service_started
      keycloak:
        condition: service_healthy
    environment:
      KOGITO_DATAINDEX_HTTP_URL: http://localhost:8180/graphql
      KOGITO_TASK_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://localhost:8480/auth -Dkogito.consoles.keycloak.config.health-check-url=http://localhost:8480/auth/realms/kogito/.well-known/openid-configuration


  order-saga:
    build: 
      context: ./order-saga
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    depends_on:
      kafka:
        condition: service_started
      infinispan:
        condition: service_healthy
      order-services:
        condition: service_started        
    environment:
      QUARKUS_PROFILE: prod
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_INFINISPAN_CLIENT_SERVER_LIST: infinispan:11222
      KEYCLOAK_URL: keycloak:8480
      DATA_INDEX_URL: data-index:8180
      ORDER_SERVICES_URL: order-services:8086
      JOB_SERVICE: localhost:8580

  order-services:
    build: 
      context: ./order-services
      dockerfile: ./src/main/docker/Dockerfile.jvm
    ports:
      - 8086:8086
    depends_on:
      kafka:
        condition: service_started
    environment:
      QUARKUS_PROFILE: prod
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  # postgres-compose:
  #   image: postgres:9.6
  #   environment:
  #     POSTGRES_PASSWORD: pass
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     - ./sql:/docker-entrypoint-initdb.d/
  #   networks:
  #     - postgres-compose-network
  #   container_name: postgres-container

  # pgadmin-compose:
  #   image: dpage/pgadmin4:5.0
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: user@user.org
  #     PGADMIN_DEFAULT_PASSWORD: pass
  #   ports:
  #     - 8055:80
  #   depends_on:
  #     - postgres-compose
  #   networks:
  #     - postgres-compose-network
  #   container_name: pgadmin-container

  # networks:
  #   postgres-compose-network:
  #     driver: bridge


